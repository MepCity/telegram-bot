""""""

Telegram Bot - Ana dosya (YENƒ∞ AKI≈û)Telegram Bot - Ana dosya

Otomatik teklif olu≈üturma botuOtomatik teklif olu≈üturma botu

1. Vergi levhasƒ± PDF -> Firma adƒ± √ßƒ±kar"""

2. Yetkili ki≈üi adƒ± sorimport logging

3. √úr√ºn/hizmet bilgileri sorfrom telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove

4. KDV ekleyerek Excel olu≈üturfrom telegram.ext import (

"""    Application,

import logging    CommandHandler,

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove    MessageHandler,

from telegram.ext import (    ConversationHandler,

    Application,    ContextTypes,

    CommandHandler,    filters,

    MessageHandler,)

    ConversationHandler,from pathlib import Path

    ContextTypes,import config

    filters,from excel_handler import ExcelHandler

)from pdf_reader import PDFReader

from pathlib import Path

from datetime import datetime# Logging ayarlarƒ±

import configlogging.basicConfig(

from excel_handler import ExcelHandler    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

from pdf_reader import PDFReader    level=logging.INFO

)

# Logging ayarlarƒ±logger = logging.getLogger(__name__)

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',# Conversation states

    level=logging.INFO(

)    ASK_TAX_PDF,

logger = logging.getLogger(__name__)    ASK_CONTACT_PERSON,

    ASK_SERVICE_NAME,

# Conversation states    ASK_QUANTITY,

(    ASK_UNIT_PRICE,

    ASK_TAX_PDF,    ASK_ADD_MORE,

    ASK_CONTACT_PERSON,) = range(6)

    ASK_SERVICE_NAME,

    ASK_QUANTITY,

    ASK_UNIT_PRICE,class OfferBot:

    ASK_ADD_MORE,    """Teklif olu≈üturma botu"""

) = range(6)    

    def __init__(self):

        self.excel_handler = ExcelHandler()

class OfferBot:        self.pdf_reader = PDFReader()

    """Teklif olu≈üturma botu"""        

            # Temp ve output dizinlerini olu≈ütur

    def __init__(self):        Path(config.TEMP_DIR).mkdir(exist_ok=True)

        self.excel_handler = ExcelHandler()        Path(config.OUTPUT_DIR).mkdir(exist_ok=True)

        self.pdf_reader = PDFReader()    

            async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        # Temp ve output dizinlerini olu≈ütur        """Bot ba≈ülangƒ±√ß komutu"""

        Path(config.TEMP_DIR).mkdir(exist_ok=True)        await update.message.reply_text(

        Path(config.OUTPUT_DIR).mkdir(exist_ok=True)            config.MESSAGES['start'],

                parse_mode='Markdown'

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):        )

        """Bot ba≈ülangƒ±√ß komutu"""        return ConversationHandler.END

        await update.message.reply_text(    

            config.MESSAGES['start'],    async def new_offer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

            parse_mode='Markdown'        """Yeni teklif ba≈ülat"""

        )        # Kullanƒ±cƒ± verilerini temizle

        return ConversationHandler.END        context.user_data.clear()

            context.user_data['services'] = []

    async def new_offer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):        

        """Yeni teklif ba≈ülat - PDF iste"""        await update.message.reply_text(

        # Kullanƒ±cƒ± verilerini temizle            config.MESSAGES['ask_tax_pdf'],

        context.user_data.clear()            parse_mode='Markdown'

        context.user_data['services'] = []        )

                return ASK_TAX_PDF

        await update.message.reply_text(    

            config.MESSAGES['ask_tax_pdf'],    async def receive_tax_pdf(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

            parse_mode='Markdown'        """Vergi levhasƒ± PDF'ini al ve i≈üle"""

        )        if not update.message.document:

        return ASK_TAX_PDF            await update.message.reply_text(

                    "‚ùå L√ºtfen bir PDF dosyasƒ± g√∂nderin."

    async def receive_tax_pdf(self, update: Update, context: ContextTypes.DEFAULT_TYPE):            )

        """Vergi levhasƒ± PDF'ini al ve firma adƒ±nƒ± √ßƒ±kar"""            return ASK_TAX_PDF

        if not update.message.document:        

            await update.message.reply_text(        # PDF'i indir

                "‚ùå L√ºtfen bir PDF dosyasƒ± g√∂nderin."        file = await update.message.document.get_file()

            )        temp_dir = Path(config.TEMP_DIR)

            return ASK_TAX_PDF        pdf_path = temp_dir / f'tax_{update.message.from_user.id}.pdf'

                await file.download_to_drive(pdf_path)

        # PDF'i indir        

        file = await update.message.document.get_file()        # PDF'den bilgileri √ßƒ±kar

        temp_dir = Path(config.TEMP_DIR)        await update.message.reply_text("‚è≥ Vergi levhasƒ± okunuyor...")

        pdf_path = temp_dir / f'tax_{update.message.from_user.id}.pdf'        

        await file.download_to_drive(pdf_path)        try:

                    tax_info = self.pdf_reader.extract_tax_info(str(pdf_path))

        # PDF'den bilgileri √ßƒ±kar            

        await update.message.reply_text("‚è≥ Vergi levhasƒ± okunuyor...")            # Bilgileri kaydet

                    context.user_data['customer_name'] = tax_info.get('company_name', '')

        try:            context.user_data['tax_office'] = tax_info.get('tax_office', '')

            tax_info = self.pdf_reader.extract_tax_info(str(pdf_path))            context.user_data['tax_number'] = tax_info.get('tax_number', '')

                        context.user_data['address'] = tax_info.get('address', '')

            # Firma adƒ±nƒ± kaydet            

            company_name = tax_info.get('company_name', '')            # Kullanƒ±cƒ±ya g√∂ster

            if company_name:            summary = f"""

                context.user_data['customer_name'] = company_name‚úÖ *Bilgiler okundu:*

                context.user_data['tax_office'] = tax_info.get('tax_office', '')

                context.user_data['tax_number'] = tax_info.get('tax_number', '')üè¢ Firma: {tax_info.get('company_name', 'Bulunamadƒ±')}

                üèõ Vergi Dairesi: {tax_info.get('tax_office', 'Bulunamadƒ±')}

                await update.message.reply_text(üÜî Vergi No: {tax_info.get('tax_number', 'Bulunamadƒ±')}

                    config.MESSAGES['pdf_read_success'].format(company_name=company_name),

                    parse_mode='Markdown'Devam ediyoruz...

                )            """

            else:            await update.message.reply_text(summary, parse_mode='Markdown')

                await update.message.reply_text(config.MESSAGES['pdf_read_error'])            

                context.user_data['customer_name'] = 'Firma Adƒ± Belirtilmedi'        except Exception as e:

                        logger.error(f'PDF okuma hatasƒ±: {e}')

        except Exception as e:            await update.message.reply_text(

            logger.error(f'PDF okuma hatasƒ±: {e}')                "‚ö†Ô∏è PDF okunamadƒ±, ancak devam ediyoruz. Bilgileri manuel girebilirsiniz."

            await update.message.reply_text(config.MESSAGES['pdf_read_error'])            )

            context.user_data['customer_name'] = 'Firma Adƒ± Belirtilmedi'        

                # PDF'i sil

        # PDF'i sil        pdf_path.unlink(missing_ok=True)

        pdf_path.unlink(missing_ok=True)        

                # ƒ∞lk hizmeti sor

        # Yetkili ki≈üi adƒ±nƒ± sor        await update.message.reply_text(

        await update.message.reply_text(            config.MESSAGES['ask_service_name'],

            config.MESSAGES['ask_contact_person'],            parse_mode='Markdown'

            parse_mode='Markdown'        )

        )        return ASK_SERVICE_NAME

        return ASK_CONTACT_PERSON    

        async def receive_service_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

    async def receive_contact_person(self, update: Update, context: ContextTypes.DEFAULT_TYPE):        """Hizmet adƒ±nƒ± al"""

        """Yetkili ki≈üi adƒ±nƒ± al"""        context.user_data['current_service'] = {'name': update.message.text.strip()}

        context.user_data['contact_person'] = update.message.text.strip()        

                await update.message.reply_text(

        # ƒ∞lk hizmeti sor            config.MESSAGES['ask_quantity'],

        await update.message.reply_text(            parse_mode='Markdown'

            config.MESSAGES['ask_service_name'],        )

            parse_mode='Markdown'        return ASK_QUANTITY

        )    

        return ASK_SERVICE_NAME    async def receive_quantity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

            """Miktarƒ± al"""

    async def receive_service_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):        try:

        """Hizmet adƒ±nƒ± al"""            quantity = int(update.message.text.strip())

        context.user_data['current_service'] = {'name': update.message.text.strip()}            context.user_data['current_service']['quantity'] = quantity

                    

        await update.message.reply_text(            await update.message.reply_text(

            config.MESSAGES['ask_quantity'],                config.MESSAGES['ask_unit_price'],

            parse_mode='Markdown'                parse_mode='Markdown'

        )            )

        return ASK_QUANTITY            return ASK_UNIT_PRICE

            except ValueError:

    async def receive_quantity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):            await update.message.reply_text(

        """Miktarƒ± al"""                "‚ùå Ge√ßersiz miktar. L√ºtfen sayƒ± girin:"

        try:            )

            quantity = int(update.message.text.strip())            return ASK_QUANTITY

            context.user_data['current_service']['quantity'] = quantity    

                async def receive_unit_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

            await update.message.reply_text(        """Birim fiyatƒ± al"""

                config.MESSAGES['ask_unit_price'],        try:

                parse_mode='Markdown'            # Noktalƒ± virg√ºl veya virg√ºl i√ßerebilir, temizle

            )            price_text = update.message.text.strip().replace('.', '').replace(',', '.')

            return ASK_UNIT_PRICE            unit_price = float(price_text)

        except ValueError:            context.user_data['current_service']['unit_price'] = unit_price

            await update.message.reply_text(            

                "‚ùå Ge√ßersiz miktar. L√ºtfen sayƒ± girin:"            # Servisi listeye ekle

            )            context.user_data['services'].append(context.user_data['current_service'])

            return ASK_QUANTITY            context.user_data.pop('current_service')

                

    async def receive_unit_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):            # √ñzet g√∂ster

        """Birim fiyatƒ± al"""            total = sum(s['quantity'] * s['unit_price'] for s in context.user_data['services'])

        try:            summary = f"""

            # Noktalƒ± virg√ºl veya virg√ºl i√ßerebilir, temizle‚úÖ *Eklendi:*

            price_text = update.message.text.strip().replace('.', '').replace(',', '.'){len(context.user_data['services'])}. {context.user_data['services'][-1]['name']}

            unit_price = float(price_text)Miktar: {context.user_data['services'][-1]['quantity']}

            context.user_data['current_service']['unit_price'] = unit_priceFiyat: {context.user_data['services'][-1]['unit_price']:,.2f} TL

            

            # Servisi listeye ekle*Toplam:* {total:,.2f} TL

            context.user_data['services'].append(context.user_data['current_service'])            """

            context.user_data.pop('current_service')            await update.message.reply_text(summary, parse_mode='Markdown')

                        

            # √ñzet g√∂ster (ara toplam, hen√ºz KDV eklenmeden)            # Daha fazla √ºr√ºn eklemek istiyor mu?

            subtotal = sum(s['quantity'] * s['unit_price'] for s in context.user_data['services'])            keyboard = [['Evet', 'Hayƒ±r']]

            summary = f"""            await update.message.reply_text(

‚úÖ *Eklendi:*                config.MESSAGES['ask_add_more'],

{len(context.user_data['services'])}. {context.user_data['services'][-1]['name']}                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),

‚Ä¢ Miktar: {context.user_data['services'][-1]['quantity']}                parse_mode='Markdown'

‚Ä¢ Fiyat: {context.user_data['services'][-1]['unit_price']:,.2f} TL            )

            return ASK_ADD_MORE

*Ara Toplam:* {subtotal:,.2f} TL            

            """        except ValueError:

            await update.message.reply_text(summary, parse_mode='Markdown')            await update.message.reply_text(

                            "‚ùå Ge√ßersiz fiyat. L√ºtfen sayƒ± girin (√∂rn: 750000):"

            # Daha fazla √ºr√ºn eklemek istiyor mu?            )

            keyboard = [['Evet', 'Hayƒ±r']]            return ASK_UNIT_PRICE

            await update.message.reply_text(    

                config.MESSAGES['ask_add_more'],    async def ask_add_more(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),        """Daha fazla √ºr√ºn eklensin mi?"""

                parse_mode='Markdown'        response = update.message.text.strip().lower()

            )        

            return ASK_ADD_MORE        if response in ['evet', 'e', '/evet']:

                        await update.message.reply_text(

        except ValueError:                config.MESSAGES['ask_service_name'],

            await update.message.reply_text(                reply_markup=ReplyKeyboardRemove(),

                "‚ùå Ge√ßersiz fiyat. L√ºtfen sayƒ± girin (√∂rn: 750000):"                parse_mode='Markdown'

            )            )

            return ASK_UNIT_PRICE            return ASK_SERVICE_NAME

            else:

    async def ask_add_more(self, update: Update, context: ContextTypes.DEFAULT_TYPE):            await update.message.reply_text(

        """Daha fazla √ºr√ºn eklensin mi?"""                config.MESSAGES['ask_offer_date'],

        response = update.message.text.strip().lower()                reply_markup=ReplyKeyboardRemove(),

                        parse_mode='Markdown'

        if response in ['evet', 'e']:            )

            await update.message.reply_text(            return ASK_OFFER_DATE

                config.MESSAGES['ask_service_name'],    

                reply_markup=ReplyKeyboardRemove(),    async def receive_offer_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

                parse_mode='Markdown'        """Teklif tarihini al"""

            )        text = update.message.text.strip()

            return ASK_SERVICE_NAME        

        else:        if text == '/bug√ºn' or text.lower() == 'bug√ºn':

            # Teklifi olu≈ütur            from datetime import datetime

            await update.message.reply_text(            context.user_data['offer_date'] = datetime.now().strftime('%d.%m.%Y')

                config.MESSAGES['processing'],        else:

                reply_markup=ReplyKeyboardRemove(),            context.user_data['offer_date'] = text

                parse_mode='Markdown'        

            )        await update.message.reply_text(

                        config.MESSAGES['ask_delivery_date'],

            try:            parse_mode='Markdown'

                customer_data = {        )

                    'name': context.user_data.get('customer_name', 'Firma Adƒ± Belirtilmedi'),        return ASK_DELIVERY_DATE

                    'contact_person': context.user_data.get('contact_person', ''),    

                }    async def receive_delivery_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

                        """Teslim tarihini al"""

                services = context.user_data.get('services', [])        text = update.message.text.strip()

                        

                offer_info = {        if text == '/yok' or text.lower() == 'yok':

                    'offer_date': datetime.now().strftime('%d.%m.%Y'),            context.user_data['delivery_date'] = '--------------------'

                    'delivery_date': '--------------------',        else:

                    'payment_method': config.DEFAULT_PAYMENT_METHOD,            context.user_data['delivery_date'] = text

                }        

                        await update.message.reply_text(

                # Excel olu≈ütur (KDV otomatik hesaplanacak)            config.MESSAGES['ask_payment_method'],

                excel_path = self.excel_handler.create_offer(customer_data, services, offer_info)            parse_mode='Markdown'

                        )

                # Hesaplamalar        return ASK_PAYMENT_METHOD

                subtotal = sum(s['quantity'] * s['unit_price'] for s in services)    

                kdv = subtotal * config.KDV_RATE    async def receive_payment_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

                total = subtotal + kdv        """√ñdeme ≈üeklini al ve teklifi olu≈ütur"""

                        text = update.message.text.strip()

                # Kullanƒ±cƒ±ya g√∂nder        

                with open(excel_path, 'rb') as f:        if text == '/varsayilan' or text.lower() == 'varsayƒ±lan':

                    await update.message.reply_document(            context.user_data['payment_method'] = config.DEFAULT_PAYMENT_METHOD

                        document=f,        else:

                        filename=Path(excel_path).name,            context.user_data['payment_method'] = text

                        caption=config.MESSAGES['success'].format(        

                            subtotal=subtotal,        # Teklifi olu≈ütur

                            kdv=kdv,        await update.message.reply_text(

                            total=total            config.MESSAGES['processing'],

                        ),            parse_mode='Markdown'

                        parse_mode='Markdown'        )

                    )        

                        try:

            except Exception as e:            customer_data = {

                logger.error(f'Teklif olu≈üturma hatasƒ±: {e}')                'name': context.user_data.get('customer_name', ''),

                import traceback                'contact_person': context.user_data.get('contact_person', ''),

                traceback.print_exc()            }

                await update.message.reply_text(            

                    config.MESSAGES['error'].format(error=str(e)),            services = context.user_data.get('services', [])

                    parse_mode='Markdown'            

                )            offer_info = {

                            'offer_date': context.user_data.get('offer_date', ''),

            return ConversationHandler.END                'delivery_date': context.user_data.get('delivery_date', ''),

                    'payment_method': context.user_data.get('payment_method', ''),

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):            }

        """ƒ∞≈ülemi iptal et"""            

        await update.message.reply_text(            # Excel olu≈ütur

            config.MESSAGES['cancelled'],            excel_path = self.excel_handler.create_offer(customer_data, services, offer_info)

            reply_markup=ReplyKeyboardRemove(),            

            parse_mode='Markdown'            # Kullanƒ±cƒ±ya g√∂nder

        )            with open(excel_path, 'rb') as f:

        return ConversationHandler.END                await update.message.reply_document(

                    document=f,

                    filename=Path(excel_path).name,

def main():                    caption=config.MESSAGES['success'],

    """Bot'u ba≈ülat"""                    parse_mode='Markdown'

    # Token kontrol√º                )

    if not config.TELEGRAM_BOT_TOKEN or config.TELEGRAM_BOT_TOKEN == 'your_bot_token_here':            

        print("‚ùå HATA: .env dosyasƒ±nda TELEGRAM_BOT_TOKEN tanƒ±mlanmamƒ±≈ü!")        except Exception as e:

        print("L√ºtfen .env.example dosyasƒ±nƒ± .env olarak kopyalayƒ±n ve token'ƒ± ekleyin.")            logger.error(f'Teklif olu≈üturma hatasƒ±: {e}')

        return            await update.message.reply_text(

                    config.MESSAGES['error'].format(error=str(e)),

    # Bot √∂rneƒüi                parse_mode='Markdown'

    bot = OfferBot()            )

            

    # Application olu≈ütur        return ConversationHandler.END

    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()    

        async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

    # Conversation handler        """ƒ∞≈ülemi iptal et"""

    conv_handler = ConversationHandler(        await update.message.reply_text(

        entry_points=[            config.MESSAGES['cancelled'],

            CommandHandler('yeni', bot.new_offer),            reply_markup=ReplyKeyboardRemove(),

        ],            parse_mode='Markdown'

        states={        )

            ASK_TAX_PDF: [MessageHandler(filters.Document.PDF, bot.receive_tax_pdf)],        return ConversationHandler.END

            ASK_CONTACT_PERSON: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_contact_person)],

            ASK_SERVICE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_service_name)],

            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_quantity)],def main():

            ASK_UNIT_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_unit_price)],    """Bot'u ba≈ülat"""

            ASK_ADD_MORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.ask_add_more)],    # Token kontrol√º

        },    if not config.TELEGRAM_BOT_TOKEN or config.TELEGRAM_BOT_TOKEN == 'your_bot_token_here':

        fallbacks=[CommandHandler('iptal', bot.cancel)],        print("‚ùå HATA: .env dosyasƒ±nda TELEGRAM_BOT_TOKEN tanƒ±mlanmamƒ±≈ü!")

    )        print("L√ºtfen .env.example dosyasƒ±nƒ± .env olarak kopyalayƒ±n ve token'ƒ± ekleyin.")

            return

    # Handler'larƒ± ekle    

    application.add_handler(CommandHandler('start', bot.start))    # Bot √∂rneƒüi

    application.add_handler(conv_handler)    bot = OfferBot()

        

    # Bot'u ba≈ülat    # Application olu≈ütur

    print("ü§ñ Bot ba≈ülatƒ±lƒ±yor...")    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()

    print(f"‚úÖ Bot √ßalƒ±≈üƒ±yor! Durdurmak i√ßin Ctrl+C")    

        # Conversation handler

    application.run_polling(allowed_updates=Update.ALL_TYPES)    conv_handler = ConversationHandler(

        entry_points=[

            CommandHandler('yeni', bot.new_offer),

if __name__ == '__main__':        ],

    main()        states={

            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_name)],
            ASK_TAX_PDF: [MessageHandler(filters.Document.PDF, bot.receive_tax_pdf)],
            ASK_SERVICE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_service_name)],
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_quantity)],
            ASK_UNIT_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_unit_price)],
            ASK_ADD_MORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.ask_add_more)],
            ASK_OFFER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_offer_date)],
            ASK_DELIVERY_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_delivery_date)],
            ASK_PAYMENT_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_payment_method)],
        },
        fallbacks=[CommandHandler('iptal', bot.cancel)],
    )
    
    # Handler'larƒ± ekle
    application.add_handler(CommandHandler('start', bot.start))
    application.add_handler(conv_handler)
    
    # Bot'u ba≈ülat
    print("ü§ñ Bot ba≈ülatƒ±lƒ±yor...")
    print(f"üì± Bot adƒ±: @{application.bot.username if hasattr(application.bot, 'username') else 'bilinmiyor'}")
    print("‚úÖ Bot √ßalƒ±≈üƒ±yor! Durdurmak i√ßin Ctrl+C")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
